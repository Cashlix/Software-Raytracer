#include <UnitTest++.h>#include "../src/cube.h"SUITE(Cube){	TEST(GetterAndSetter)	{		// 0-Vektor Initialisierung		Vector3D empty;		Cube c;		for (int i = 0; i < 8; ++i)			CHECK(c[i] == empty);		// []operator		Vector3D init[8] = {			Vector3D(1,2,3), Vector3D(4,5,6),			Vector3D(7,8,9), Vector3D(10,11,12),			Vector3D(13,14,15), Vector3D(16,17,18),			Vector3D(19,20,21), Vector3D(22,23,24)		};		c = Cube(init);		for (int i = 0; i < 8; ++i)			CHECK(c[i] == init[i]);		for (int i = 0; i < 8; ++i)			c[i] = init[7-i];		for (int i = 0; i < 8; ++i)			CHECK(c[i] == init[7-i]);		// getEdges()		c = Cube(init);		Edge const* e = c.getEdges();		Edge ed;		for (int i = 0; i < 4; ++i)		{			ed.start = init[i];			ed.end = init[(i+1)%4];			CHECK(e->start == ed.start);			CHECK(e++->end == ed.end);					}		for (int i = 4; i < 8; ++i)		{			ed.start = init[i];			ed.end = init[(i==7?4:(i+1)%8)];			CHECK(e->start == ed.start);			CHECK(e++->end == ed.end);		}				ed.start = init[0];		ed.end = init[4];		CHECK(e->start == ed.start);		CHECK(e++->end== ed.end);		ed.start = init[1];		ed.end = init[5];		CHECK(e->start == ed.start);		CHECK(e++->end== ed.end);		ed.start = init[3];		ed.end = init[7];		CHECK(e->start == ed.start);		CHECK(e++->end== ed.end);		ed.start = init[2];		ed.end = init[6];		CHECK(e->start == ed.start);		CHECK(e->end== ed.end);	}	TEST(EqualOperator)	{		Vector3D init1[8] = {			Vector3D(0,1,1), Vector3D(1,1,1),			Vector3D(1,0.0f,1), Vector3D(0,0,1),			Vector3D(0,1,0), Vector3D(1,1,0),			Vector3D(0,0,0), Vector3D(0,0,0)		};		Vector3D init2[8] = {			Vector3D(0,1,1.00000000001f), Vector3D(1,1,1),			Vector3D(1,0,1), Vector3D(0,0,1),			Vector3D(0,1,0), Vector3D(1,1,0),			Vector3D(0,0,0), Vector3D(0,0,0)		};		Cube c1(init1);		Cube c2(init2);		CHECK(c1 == c2);	}	TEST(PointEnclosing)	{		Cube c;		Vector3D init[8] = {			Vector3D(0,1,1), Vector3D(1,1,1),			Vector3D(1,0,1), Vector3D(0,0,1),			Vector3D(0,1,0), Vector3D(1,1,0),			Vector3D(0,0,0), Vector3D(0,0,0)		};		c = Cube(init);		CHECK(c.enclosesPoint(Vector3D(0,0,0)));		CHECK(c.enclosesPoint(Vector3D(1,0,0)));		CHECK(c.enclosesPoint(Vector3D(0.9999f,0,0)));		CHECK(!c.enclosesPoint(Vector3D(1.0001f,0,0)));		CHECK(c.enclosesPoint(Vector3D(0.5f,0.5f,0.5f)));		CHECK(c.enclosesPoint(Vector3D(0.5f,1,1)));		CHECK(!c.enclosesPoint(Vector3D(-0.5f,1,1)));		CHECK(!c.enclosesPoint(Vector3D(0.5f,1.00001f,1)));		CHECK(c.enclosesPoint(Vector3D(0.12345f,0.8331f,0.432323f)));	}}